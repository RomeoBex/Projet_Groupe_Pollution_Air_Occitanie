---
title: "Projet Pollution"
author: "BEX Roméo MARHEINEKE Linus BATALLER Jules"
date : today
format:
  revealjs: 
    theme: default
    title-slide-attributes:
        data-background-image: bg_slides.svg 
    transition: slide
---

# Objectifs du projet {background-color="#CAFFEF"}
::: {.incremental}
- Etablir une corrélation entre pollution en Occitanie et météo 
- Etablir une hiérarchie des villes en fonction du taux de pollution des principaux polluants 
:::


## Technicité et source {background-color="#CAFFEF"}
:::{.incremental}
- Bibilothèques : 
    + pandas
    + matplotlib
    + seaborn
    + plotly
    + folium
  
- Diapositives : [Quarto](https://quarto.org/)
- Sources : [données SYNOP](https://public.opendatasoft.com/explore/dataset/donnees-synop-essentielles-omm/api/?sort=date)
           et [Atmo Occitanie](https://data-atmo-occitanie.opendata.arcgis.com/pages/liste-des-flux)
:::

## {background-video="video.mp4" background-video-loop="true" background-video-muted="true"}

# {background-image="apercu.png"}

# {background-image="apercu2.png"}

## {background-video="vivi.mp4" background-video-loop="true" background-video-muted="true"}




# Analyse du code {background-color="#CAFFEF"}
```{.python code-line-numbers="2,3,4,5,6|9|12|15|18,19|22,23,24,25|27,28,29|32"}

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap
import seaborn as sns
import os 

# Remplacez 'votre_fichier.csv' par le chemin vers votre fichier CSV
chemin_fichier_csv = 'Mesure_mensuelle_Region_Occitanie_Polluants_Principaux.csv'

#
df = pd.read_csv(chemin_fichier_csv)

#
couleurs = sns.color_palette("coolwarm", as_cmap=True)

# Créer un diagramme circulaire (camembert) pour la variable 'nom_dept'
plt.figure(figsize=(10, 8))
sns.set(style="whitegrid")

# Tracer le camembert avec le dégradé de couleurs
df['nom_dept'].value_counts().plot.pie(autopct='%1.1f%%', startangle=140, cmap=couleurs)
plt.title('Répartition des données par département')
plt.axis('equal')  # Assure que le camembert est dessiné comme un cercle
plt.ylabel('')  

dossier_diapositives = "diapositives"
chemin_fichier_svg = os.path.join(dossier_diapositives, 'graph3.svg')
plt.savefig(chemin_fichier_svg, format='svg')


plt.show()
```

## Résultat : {background-color="#CAFFEF"}

```{python}

#fonctionne camembert dégradé de couleur 
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap
import seaborn as sns
import os 

# Remplacez 'votre_fichier.csv' par le chemin vers votre fichier CSV
chemin_fichier_csv = 'Mesure_mensuelle_Region_Occitanie_Polluants_Principaux.csv'

# Charger le fichier CSV dans un DataFrame
df = pd.read_csv(chemin_fichier_csv)

# Créer un dégradé de couleurs pour la palette
couleurs = sns.color_palette("coolwarm", as_cmap=True)

# Créer un diagramme circulaire (camembert) pour la variable 'nom_dept'
plt.figure(figsize=(10, 8))
sns.set(style="whitegrid")  # Style de fond pour une meilleure lisibilité

# Tracer le camembert avec le dégradé de couleurs
df['nom_dept'].value_counts().plot.pie(autopct='%1.1f%%', startangle=140, cmap=couleurs)

plt.title('Répartition des données par département')
plt.axis('equal')  # Assure que le camembert est dessiné comme un cercle
plt.ylabel('')  # Supprimer l'étiquette de l'axe y pour plus de clarté



plt.show()
```

# Graphique 3D de Rodez : {background-color="#CAFFEF"}

```{.python code-line-numbers="2,3|6|9|13|16|19|22,22,23,25|28,29|32"}

import pandas as pd
import plotly.express as px

# Charger le fichier CSV dans un DataFrame
df = pd.read_csv('Mesure_annuelle_Region_Occitanie_Polluants_Principaux.csv')

# Filtrer les données pour la ville de RODEZ
rodez_data = df[df['nom_com'] == 'RODEZ'].copy()  
#

# Convertir la colonne 'date_debut' en format datetime
rodez_data['date_debut'] = pd.to_datetime(rodez_data['date_debut'])

# Trier les données par date ordre croissant 
rodez_data = rodez_data.sort_values(by='date_debut')

# Obtenir la valeur maximale de chaque polluant pour chaque année
max_values_rodez = rodez_data.groupby(['date_debut', 'nom_poll'])['valeur'].max().reset_index()

# Créer un graphique en 3D avec Plotly Express
fig_rodez = px.scatter_3d(max_values_rodez, x='date_debut', y='nom_poll', z='valeur', color='valeur',
                          labels={'valeur': f'Concentration maximale de pollution (ug.m-3)'},
                          title='Concentration maximale de pollution à RODEZ par année',
                          size_max=18)

# Personnaliser le graphique
fig_rodez.update_layout(scene=dict(xaxis_title='Année', yaxis_title='Polluant', zaxis_title='Concentration maximale de pollution (ug.m-3)'),
                        height=600, width=800)  # Ajustez ces valeurs en fonction de la taille souhaitée

# Afficher le graphique interactif
fig_rodez.show()
``` 

# Résultat : {background-color="#CAFFEF"}

```{python}
import pandas as pd
import plotly.express as px

# Charger le fichier CSV dans un DataFrame
df = pd.read_csv('Mesure_annuelle_Region_Occitanie_Polluants_Principaux.csv')

# Filtrer les données pour la ville de RODEZ
rodez_data = df[df['nom_com'] == 'RODEZ'].copy()  

# Convertir la colonne 'date_debut' en format datetime
rodez_data['date_debut'] = pd.to_datetime(rodez_data['date_debut'])

# Trier les données par date
rodez_data = rodez_data.sort_values(by='date_debut')

# Obtenir la valeur maximale de chaque polluant pour chaque année
max_values_rodez = rodez_data.groupby(['date_debut', 'nom_poll'])['valeur'].max().reset_index()

# Créer un graphique en 3D avec Plotly Express
fig_rodez = px.scatter_3d(max_values_rodez, x='date_debut', y='nom_poll', z='valeur', color='valeur',
                          labels={'valeur': f'Concentration maximale de pollution (ug.m-3)'},
                          title='Concentration maximale de pollution à RODEZ par année',
                          size_max=18)

# Personnaliser le graphique
fig_rodez.update_layout(scene=dict(xaxis_title='Année', yaxis_title='Polluant', zaxis_title='Concentration maximale de pollution (ug.m-3)'),
                        height=600, width=800)  # Ajustez ces valeurs en fonction de la taille souhaitée

# Afficher le graphique interactif
fig_rodez.show()

```


# Code carte intéractive : {background-color="#CAFFEF"}

```{.python code-line-numbers="2,3|6,7,8,9,10,11,12,13,14|18|21,22,23|26,27|30,31,32,33,34,35,36,37,38,39,40,41,42|45,46,47,48,49,50,51,53|,56,57"}
#test d'une carte des densités, interactive 
import folium
from branca.colormap import linear

# Coordonnées et populations des grandes villes de l'Occitanie (Latitude, Longitude, Population)
grandes_villes_occitanie = {
    'Toulouse': (43.6047, 1.4442, 479553),
    'Montpellier': (43.6110, 3.8767, 285121),
    'Nîmes': (43.8374, 4.3601, 151001),
    'Perpignan': (42.6986, 2.8954, 121875),
    'Carcassonne': (43.2130, 2.3491, 47038),
    'Albi': (43.9291, 2.1483, 49236),
    'Tarbes': (43.2328, 0.0716, 40356),
    'Auch': (43.6460, 0.5857, 23853),
}

# Coordonnées du centre de l'Occitanie
centre_occitanie = (43.5912, 1.4466)

# Créer une carte centrée sur l'Occitanie
carte_occitanie = folium.Map(location=centre_occitanie, zoom_start=8, tiles='Stamen Terrain')
folium.Marker(centre_occitanie, popup='Centre de l\'Occitanie', icon=folium.Icon(color='red')).add_to(carte_occitanie)
folium.TileLayer('openstreetmap').add_to(carte_occitanie)  # Ajouter une couche OpenStreetMap en arrière-plan

# Créer une colormap en fonction de la population
colormap = linear.YlOrRd_09.scale(min(grandes_villes_occitanie.values(), key=lambda x: x[2])[2],
                                  max(grandes_villes_occitanie.values(), key=lambda x: x[2])[2])

# Ajouter des marqueurs pour chaque grande ville avec une couleur correspondant à la population
for ville, coordonnees in grandes_villes_occitanie.items():
    if coordonnees[2] > 300000:
        icon = folium.Icon(color='blue', icon='star')
    elif coordonnees[2] > 100000:
        icon = folium.Icon(color='green', icon='cloud')
    else:
        icon = folium.Icon(color='red', icon='info-sign')

    folium.Marker(
        location=coordonnees[:2],
        popup=f"{ville}: {coordonnees[2]} habitants",
        icon=icon
    ).add_to(carte_occitanie)

# Utiliser une échelle log pour le rayon des cercles
for ville, coordonnees in grandes_villes_occitanie.items():
    folium.CircleMarker(
        location=coordonnees[:2],
        radius=coordonnees[2] / 50000,
        popup=f"{ville}: {coordonnees[2]} habitants",
        color=colormap(coordonnees[2]),
        fill=True,
        fill_color=colormap(coordonnees[2]),
    ).add_to(carte_occitanie)

# Personnaliser la légende
colormap.caption = 'Population et densité des grandes villes en Occitanie'
colormap.add_to(carte_occitanie)


```

# Résultat : {background-color="#CAFFEF"}

```{python}
#test d'une carte des densités, interactive 
import folium
from branca.colormap import linear

# Coordonnées et populations des grandes villes de l'Occitanie (Latitude, Longitude, Population)
grandes_villes_occitanie = {
    'Toulouse': (43.6047, 1.4442, 479553),
    'Montpellier': (43.6110, 3.8767, 285121),
    'Nîmes': (43.8374, 4.3601, 151001),
    'Perpignan': (42.6986, 2.8954, 121875),
    'Carcassonne': (43.2130, 2.3491, 47038),
    'Albi': (43.9291, 2.1483, 49236),
    'Tarbes': (43.2328, 0.0716, 40356),
    'Auch': (43.6460, 0.5857, 23853),
}

# Coordonnées du centre de l'Occitanie
centre_occitanie = (43.5912, 1.4466)

# Créer une carte centrée sur l'Occitanie
carte_occitanie = folium.Map(location=centre_occitanie, zoom_start=8, tiles='Stamen Terrain')
folium.Marker(centre_occitanie, popup='Centre de l\'Occitanie', icon=folium.Icon(color='red')).add_to(carte_occitanie)
folium.TileLayer('openstreetmap').add_to(carte_occitanie)  # Ajouter une couche OpenStreetMap en arrière-plan

# Créer une colormap en fonction de la population
colormap = linear.YlOrRd_09.scale(min(grandes_villes_occitanie.values(), key=lambda x: x[2])[2],
                                  max(grandes_villes_occitanie.values(), key=lambda x: x[2])[2])

# Ajouter des marqueurs pour chaque grande ville avec une couleur correspondant à la population
for ville, coordonnees in grandes_villes_occitanie.items():
    if coordonnees[2] > 300000:
        icon = folium.Icon(color='blue', icon='star')
    elif coordonnees[2] > 100000:
        icon = folium.Icon(color='green', icon='cloud')
    else:
        icon = folium.Icon(color='red', icon='info-sign')

    folium.Marker(
        location=coordonnees[:2],
        popup=f"{ville}: {coordonnees[2]} habitants",
        icon=icon
    ).add_to(carte_occitanie)

# Utiliser une échelle log pour le rayon des cercles
for ville, coordonnees in grandes_villes_occitanie.items():
    folium.CircleMarker(
        location=coordonnees[:2],
        radius=coordonnees[2] / 50000 * 10,  # Ajustez le facteur de multiplication ici
        popup=f"{ville}: {coordonnees[2]} habitants",
        color=colormap(coordonnees[2]),
        fill=True,
        fill_color=colormap(coordonnees[2]),
    ).add_to(carte_occitanie)

# Personnaliser la légende
colormap.caption = 'Population des grandes villes en Occitanie'
colormap.add_to(carte_occitanie)

# Afficher la carte dans le notebook
carte_occitanie




```
# Code carte intéractive par polluant: {background-color="#CAFFEF"}

```{.python code-line-numbers="8,9,10,11,12,13,14,15,16|18,19,20,21|54|63|73,74|79,80|90,91,92,93,94,95,96,97,98|106|112,113,114,115,116,117|120|123"}

import pandas as pd
import numpy as np
from ipyleaflet import Map, TileLayer, GeoJSON, Marker, AwesomeIcon
import ipywidgets as widgets
from IPython.display import HTML, display

class Markers:
    def __init__(self, date_creation, polluant,valeur, X, Y):
        self.date_creation = date_creation
        self.polluant = polluant
        self.valeur = valeur
        self.X = X 
        self.Y = Y
    def add_to_map(self,carte):
        carte.add_layer(Marker(location=(self.Y,self.X), draggable=False, title=f"Valeur: {self.valeur}"))  

def switch(row):
    if row["id_poll_ue"] == 7:
        marker = Markers(row["date_debut"],row["id_poll_ue"],row["valeur"],row["X"],row["Y"])
        vector_O3.append(marker)
        
    elif row["id_poll_ue"] == 8:
        marker = Markers(row["date_debut"],row["id_poll_ue"],row["valeur"],row["X"],row["Y"])
        vector_NO2.append(marker)
       
    elif row["id_poll_ue"] == 9:
        marker = Markers(row["date_debut"],row["id_poll_ue"],row["valeur"],row["X"],row["Y"])
        vector_NOX.append(marker)
        
    elif row["id_poll_ue"] == 38:
        marker = Markers(row["date_debut"],row["id_poll_ue"],row["valeur"],row["X"],row["Y"])
        vector_NO.append(marker)
        
    elif row["id_poll_ue"] == 5:
        marker = Markers(row["date_debut"],row["id_poll_ue"],row["valeur"],row["X"],row["Y"])
        vector_PM10.append(marker)
        
    elif row["id_poll_ue"] == 11:
        marker = Markers(row["date_debut"],row["id_poll_ue"],row["valeur"],row["X"],row["Y"])
        vector_H2S.append(marker)
        
    elif row["id_poll_ue"] == 6001:
        marker = Markers(row["date_debut"],row["id_poll_ue"],row["valeur"],row["X"],row["Y"])
        vector_PM25.append(marker)
        
    elif row["id_poll_ue"] == 1:
        marker = Markers(row["date_debut"],row["id_poll_ue"],row["valeur"],row["X"],row["Y"])
        vector_SO2.append(marker)
        
    else:
        print(error)

carte_O3 = Map(center=(43.611015, 3.876733), zoom=9)
carte_NO = Map(center=(43.611015, 3.876733), zoom=9)
carte_NO2 = Map(center=(43.611015, 3.876733), zoom=9)
carte_NOX = Map(center=(43.611015, 3.876733), zoom=9)
carte_H2S = Map(center=(43.611015, 3.876733), zoom=9)
carte_PM10 = Map(center=(43.611015, 3.876733), zoom=9)
carte_PM25 = Map(center=(43.611015, 3.876733), zoom=9)
carte_SO2 = Map(center=(43.611015, 3.876733), zoom=9)

vector_O3 = []
vector_NO = []
vector_NO2 = []
vector_NOX = []
vector_H2S = []
vector_PM10 = []
vector_PM25 = []
vector_SO2 = []

# Charger le fichier CSV dans un DataFrame
chemin_fichier_csv = 'Mesure_mensuelle_Region_Occitanie_Polluants_Principaux.csv'
df = pd.read_csv(chemin_fichier_csv)

# Créer une colonne 'geometry' avec les coordonnées X et Y sous forme de GeoJSON
df['geometry'] = df.apply(lambda row: {"type": "Point", "coordinates": [row['X'], row['Y']]}, axis=1)

for index, row in df.iterrows():
  switch(row)


vecteur_cartes=[vector_O3,vector_NO,vector_NO2,vector_NOX,vector_H2S,vector_PM10,vector_PM25,vector_SO2]

v_cartes=[carte_O3,carte_NO,carte_NO2,carte_NOX,carte_H2S,carte_PM10,carte_PM25,carte_SO2]

values_by_location = {}
marker_by_location = []
for vector in vecteur_cartes:
    for mark in vector:
        X, Y = mark.X, mark.Y
        val = mark.valeur
        lieu_key = (X, Y)
        if lieu_key in values_by_location:
            values_by_location[lieu_key].append(val)
        else:
            values_by_location[lieu_key] = [val]
    mean_by_location = {lieu: round(np.mean(val), 2) for lieu, val in values_by_location.items()}
    values_by_location = {}
    marker_by_location.append(mean_by_location)


wmts_url = "https://services.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer/WMTS"
wmts_layer = TileLayer(url=wmts_url, name="WMTS Layer") 

maps_box = widgets.VBox()
i=0
for cartes in v_cartes:
    cartes.add_layer(wmts_layer)

    for lieu, moyenne in marker_by_location[i].items():
        marker = Marker(
            location=(lieu[1], lieu[0]),
            draggable=False,
            title=f"Valeur: {moyenne}"
        )
        cartes.add_layer(marker)

    # Add the map to the horizontal box
    maps_box.children += (cartes,)
    i=i+1

display(maps_box)
```
# Résultat pour l'ozone : {background-color="#CAFFEF"}
```{python}

import pandas as pd
import numpy as np
from ipyleaflet import Map, TileLayer, GeoJSON, Marker, AwesomeIcon
import ipywidgets as widgets
from IPython.display import HTML, display

class Markers:
    def __init__(self, date_creation, polluant,valeur, X, Y):
        self.date_creation = date_creation
        self.polluant = polluant
        self.valeur = valeur
        self.X = X 
        self.Y = Y
    def add_to_map(self,carte):
        carte.add_layer(Marker(location=(self.Y,self.X), draggable=False, title=f"Valeur: {self.valeur}"))  

def switch(row):
    if row["id_poll_ue"] == 7:
        marker = Markers(row["date_debut"],row["id_poll_ue"],row["valeur"],row["X"],row["Y"])
        vector_O3.append(marker)
        
    elif row["id_poll_ue"] == 8:
        marker = Markers(row["date_debut"],row["id_poll_ue"],row["valeur"],row["X"],row["Y"])
        vector_NO2.append(marker)
       
    elif row["id_poll_ue"] == 9:
        marker = Markers(row["date_debut"],row["id_poll_ue"],row["valeur"],row["X"],row["Y"])
        vector_NOX.append(marker)
        
    elif row["id_poll_ue"] == 38:
        marker = Markers(row["date_debut"],row["id_poll_ue"],row["valeur"],row["X"],row["Y"])
        vector_NO.append(marker)
        
    elif row["id_poll_ue"] == 5:
        marker = Markers(row["date_debut"],row["id_poll_ue"],row["valeur"],row["X"],row["Y"])
        vector_PM10.append(marker)
        
    elif row["id_poll_ue"] == 11:
        marker = Markers(row["date_debut"],row["id_poll_ue"],row["valeur"],row["X"],row["Y"])
        vector_H2S.append(marker)
        
    elif row["id_poll_ue"] == 6001:
        marker = Markers(row["date_debut"],row["id_poll_ue"],row["valeur"],row["X"],row["Y"])
        vector_PM25.append(marker)
        
    elif row["id_poll_ue"] == 1:
        marker = Markers(row["date_debut"],row["id_poll_ue"],row["valeur"],row["X"],row["Y"])
        vector_SO2.append(marker)
        
    else:
        print(error)

carte_O3 = Map(center=(43.611015, 3.876733), zoom=9)
carte_NO = Map(center=(43.611015, 3.876733), zoom=9)
carte_NO2 = Map(center=(43.611015, 3.876733), zoom=9)
carte_NOX = Map(center=(43.611015, 3.876733), zoom=9)
carte_H2S = Map(center=(43.611015, 3.876733), zoom=9)
carte_PM10 = Map(center=(43.611015, 3.876733), zoom=9)
carte_PM25 = Map(center=(43.611015, 3.876733), zoom=9)
carte_SO2 = Map(center=(43.611015, 3.876733), zoom=9)

vector_O3 = []
vector_NO = []
vector_NO2 = []
vector_NOX = []
vector_H2S = []
vector_PM10 = []
vector_PM25 = []
vector_SO2 = []

# Charger le fichier CSV dans un DataFrame
chemin_fichier_csv = 'Mesure_mensuelle_Region_Occitanie_Polluants_Principaux.csv'
df = pd.read_csv(chemin_fichier_csv)

# Créer une colonne 'geometry' avec les coordonnées X et Y sous forme de GeoJSON
df['geometry'] = df.apply(lambda row: {"type": "Point", "coordinates": [row['X'], row['Y']]}, axis=1)

for index, row in df.iterrows():


    switch(row)


vecteur_cartes=[vector_O3,vector_NO,vector_NO2,vector_NOX,vector_H2S,vector_PM10,vector_PM25,vector_SO2]

v_cartes=[carte_O3,carte_NO,carte_NO2,carte_NOX,carte_H2S,carte_PM10,carte_PM25,carte_SO2]

values_by_location = {}
marker_by_location = []
for vector in vecteur_cartes:
    for mark in vector:
        X, Y = mark.X, mark.Y
        val = mark.valeur
        
        lieu_key = (X, Y)
        if lieu_key in values_by_location:
            values_by_location[lieu_key].append(val)
        else:
            values_by_location[lieu_key] = [val]
    mean_by_location = {lieu: round(np.mean(val), 2) for lieu, val in values_by_location.items()}
    values_by_location = {}
    marker_by_location.append(mean_by_location)
    marker_by_location[0]

wmts_url = "https://services.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer/WMTS"
wmts_layer = TileLayer(url=wmts_url, name="WMTS Layer") 

maps_box = widgets.VBox()

carte_O3.add_layer(wmts_layer)
for lieu, moyenne in marker_by_location[0].items():
    marker = Marker(
        location=(lieu[1], lieu[0]),
        draggable=False,
        title=f"Valeur: {moyenne}"
    )
    carte_O3.add_layer(marker)

    # Add the map to the horizontal box
maps_box.children += (carte_O3,)


display(maps_box)
```


# Hiérarchie des villes en fonction des polluants :{background-color="#CAFFEF"} 

# Suspens ... {background-color="#353535"}



#  {background-image="classement.svg"}




# API Call : {background-color="#CAFFEF"}


```{.python code-line-numbers="51|1|2,3,4,5,6,7|53|10|23,24,25,26,27,28,29,30,31|34,35,36,37,38,39,40,41,42"}
def get_data(time):
    if time == "j":
        url = "https://services9.arcgis.com/7Sr9Ek9c1QTKmbwr/arcgis/rest/services/Mesure_horaire_(30j)_Region_Occitanie_Polluants_Reglementaires_1/FeatureServer/0/query?where=1%3D1&outFields=*&outSR=4326&f=json"
    elif time == "m":
        url = "https://services9.arcgis.com/7Sr9Ek9c1QTKmbwr/arcgis/rest/services/mesures_occitanie_mensuelle_poll_princ/FeatureServer/0/query?where=1%3D1&outFields=*&outSR=4326&f=json"
    response = requests.get(url)
    return response.json()


def extract_data_to_df(data: dict) -> pd.DataFrame:
    """extracts important data from dict and returns dataframe with data"""

    # get important data
    cities = []
    starts = []
    ends = []
    val = []
    poll_ue = []
    typo = []
    infl = []
    nom_poll = []

    for element in data["features"]:
        cities += [element.get("attributes").get("nom_com")]
        starts += [element.get("attributes").get("date_debut")]
        ends += [element.get("attributes").get("date_fin")]
        val += [element.get("attributes").get("valeur")]
        poll_ue += [element.get("attributes").get("id_poll_ue")]
        typo += [element.get("attributes").get("typologie")]
        infl += [element.get("attributes").get("influence")]
        nom_poll += [element.get("attributes").get("nom_poll")]

    # construct df from data
    df_data = pd.DataFrame()
    df_data["city"] = cities
    df_data["start"] = starts
    df_data["end"] = ends
    df_data["values"] = val
    df_data["poll_ue"] = poll_ue
    df_data["nom_poll"] = nom_poll
    df_data["influence"] = infl
    df_data["typology"] = typo

    # convert timestamps to dates
    df_data["start"] = df_data["start"].apply(lambda x: dt.fromtimestamp(x / 1e3))
    df_data["end"] = df_data["end"].apply(lambda x: dt.fromtimestamp(x / 1e3))

    return df_data


def data_prep(time):
    data = get_data(time=time)
    df = extract_data_to_df(data=data)
    return df
```

## Visualization {background-color="#CAFFEF"}

```{.python}
from functions import dataprep as dap
from functions import visuals as viz

df = dap.data_prep(time='m')
viz.visualize_df(df=df, city='MONTPELLIER', nom_poll="NOX")
```


```{python}
from functions import visuals as viz
from functions import dataprep as dap

df = dap.data_prep(time='m')
viz.visualize_df(df=df, city='MONTPELLIER', nom_poll="NOX")

```


# Cohérence avec le diagramme de Gantt ?{background-color="#CAFFEF"} 

```{mermaid}
gantt
    title Exemple de Diagramme de Gantt 
    dateFormat YYYY-MM-DD
    title Diagramme de Gantt 
    axisFormat %d-%m

    section Dates importantes
    Fin du projet :crit, 2023-12-10, 5d
    Présentation Orale :crit, 2023-12-15, 8d  


    section Repository
    Création de contenu : a3, 2023-10-07, 10d
    Ajout d'un Readme : a4, 2023-10-17, 10d
    Ajout de index html : a5, 2023-10-24, 10d

    section Pages web
    Création de la page web : a6, 2023-10-31, 10d
    Ajout de la carte : a7, 2023-11-08, 12d
    Diapositives quarto : a9, 2023-11-30, 13d
    Ajout d'interactivité : a8, 2023-11-18, 22d
    Embellissement de la page : a9, 2023-11-01, 40d
```


# Problèmes rencontrés : {background-image="brain1.svg" background-opacity="0.5" background-size="600px" background-position="bottom" }

- Création de la page web 
- Compréhension de Quarto 
- intégrer du code sans que le code ne s'Affiche
- gérer un ficher .yml et .css
- Importer les données météos 
- Gérer le rangement sur le repository 
- Nettoyage de fichier csv 
 


## End {background-image="bg_slides.svg"}
